import sqlite3
import os
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ TOKEN.")

DB_FILE = "bot.db"  # –§–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite

user_states = {}

# --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö --- #

def init_db() -> None:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è —Å–ø—Ä–∞–≤
    c.execute('''CREATE TABLE IF NOT EXISTS tasks 
                 (user_id TEXT, day TEXT, task_text TEXT, done INTEGER)''')
    # –¢–∞–±–ª–∏—Ü—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    c.execute('''CREATE TABLE IF NOT EXISTS reminders 
                 (user_id TEXT PRIMARY KEY, interval TEXT)''')
    conn.commit()
    conn.close()

def load_tasks(user_id: str) -> dict:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT day, task_text, done FROM tasks WHERE user_id = ?", (user_id,))
    rows = c.fetchall()
    conn.close()
    
    tasks = {"today": [], "tomorrow": []}
    for day, text, done in rows:
        tasks[day].append({"text": text, "done": bool(done)})
    return tasks

def save_task(user_id: str, day: str, task_text: str, done: bool = False) -> None:
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø—Ä–∞–≤–∏"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT INTO tasks (user_id, day, task_text, done) VALUES (?, ?, ?, ?)",
              (user_id, day, task_text, int(done)))
    conn.commit()
    conn.close()

def load_reminder(user_id: str) -> str:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT interval FROM reminders WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else "off"

def save_reminder(user_id: str, interval: str) -> None:
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO reminders (user_id, interval) VALUES (?, ?)",
              (user_id, interval))
    conn.commit()
    conn.close()

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é --- #

def get_main_menu() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ —Å–ø—Ä–∞–≤—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="add_today")],
        [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ —Å–ø—Ä–∞–≤—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="add_tomorrow")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ", callback_data="list_tasks")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –ö–æ–º–∞–Ω–¥–∏ --- #

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫—É —Å–ø—Ä–∞–≤.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_main_menu()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)

    if query.data == "add_today":
        user_states[user_id] = "awaiting_today_task"
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:")
    elif query.data == "add_tomorrow":
        user_states[user_id] = "awaiting_tomorrow_task"
        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å —Å–ø—Ä–∞–≤—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞:")
    elif query.data == "list_tasks":
        await show_task_list(query, user_id)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ø—Ä–∞–≤"""
    user_id = str(update.effective_user.id)
    task_text = update.message.text

    if user_id in user_states:
        if user_states[user_id] == "awaiting_today_task":
            save_task(user_id, "today", task_text)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {task_text}", reply_markup=get_main_menu())
        elif user_states[user_id] == "awaiting_tomorrow_task":
            save_task(user_id, "tomorrow", task_text)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {task_text}", reply_markup=get_main_menu())
        del user_states[user_id]
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())

async def show_task_list(query, user_id: str) -> None:
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É —Å–ø—Ä–∞–≤"""
    tasks = load_tasks(user_id)
    today_tasks = tasks["today"]
    tomorrow_tasks = tasks["tomorrow"]
    
    response = ""
    if today_tasks:
        response += "üìÖ –°—å–æ–≥–æ–¥–Ω—ñ:\n" + "\n".join(
            f"{i+1}. {'‚úîÔ∏è' if t['done'] else '‚ùå'} {t['text']}" for i, t in enumerate(today_tasks)
        ) + "\n\n"
    if tomorrow_tasks:
        response += "üìÜ –ó–∞–≤—Ç—Ä–∞:\n" + "\n".join(
            f"{len(today_tasks)+i+1}. {'‚úîÔ∏è' if t['done'] else '‚ùå'} {t['text']}" for i, t in enumerate(tomorrow_tasks)
        )
    
    if not response:
        response = "üóí –ù–µ–º–∞—î —Å–ø—Ä–∞–≤."
    await query.edit_message_text(response, reply_markup=get_main_menu())

# --- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è --- #

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    text = (
        "‚è∞ –Ø–∫ —á–∞—Å—Ç–æ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ —Å–ø—Ä–∞–≤–∏?\n"
        "/remind_1h ‚Äì –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É\n"
        "/remind_2h ‚Äì –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏\n"
        "/remind_off ‚Äì –Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏"
    )
    await update.message.reply_text(text)

async def set_reminder_interval(update: Update, context: ContextTypes.DEFAULT_TYPE, interval: str) -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    user_id = str(update.effective_user.id)
    save_reminder(user_id, interval)
    label = {"1h": "–∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É", "2h": "–∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏", "off": "–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏"}[interval]
    await update.message.reply_text(f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {label}", reply_markup=get_main_menu())

async def send_reminders(app) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    try:
        now = datetime.datetime.now().time()
        if not (datetime.time(9, 0) <= now <= datetime.time(22, 0)):
            return

        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()
        c.execute("SELECT user_id, interval FROM reminders WHERE interval != 'off'")
        reminders = c.fetchall()
        conn.close()

        for user_id, _ in reminders:
            tasks = load_tasks(user_id)
            today_incomplete = [t["text"] for t in tasks["today"] if not t["done"]]
            tomorrow_incomplete = [t["text"] for t in tasks["tomorrow"] if not t["done"]]
            
            if today_incomplete or tomorrow_incomplete:
                text = "üîî –í–∏ —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–ª–∏:\n"
                if today_incomplete:
                    text += "üìÖ –°—å–æ–≥–æ–¥–Ω—ñ:\n" + "\n".join(f"‚ùå {t}" for t in today_incomplete) + "\n"
                if tomorrow_incomplete:
                    text += "üìÜ –ó–∞–≤—Ç—Ä–∞:\n" + "\n".join(f"‚ùå {t}" for t in tomorrow_incomplete)
                await app.bot.send_message(chat_id=int(user_id), text=text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {e}")

# --- –ó–∞–ø—É—Å–∫ --- #

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        init_db()  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        app = ApplicationBuilder().token(TOKEN).build()

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(CommandHandler("remind", set_reminder))
        app.add_handler(CommandHandler("remind_1h", lambda u, c: set_reminder_interval(u, c, "1h")))
        app.add_handler(CommandHandler("remind_2h", lambda u, c: set_reminder_interval(u, c, "2h")))
        app.add_handler(CommandHandler("remind_off", lambda u, c: set_reminder_interval(u, c, "off")))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        scheduler = AsyncIOScheduler()
        scheduler.add_job(lambda: send_reminders(app), "interval", hours=1)
        scheduler.start()

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞ Render")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await app.initialize()
        await app.start()
        await app.updater.start_polling()

        # –¢—Ä–∏–º–∞—î–º–æ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∏–º
        while True:
            await asyncio.sleep(1)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ main: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())